Here is the correct order to run the many scripts to auomatize the process.
Linux folder are scripts for linux systems.
Windows folders has scripts for windows systems.

IMPORTANT: each file.py contains an object called "main_dir" which refers to the directory where all the files used are (where you are working essentially). 
It must be MANUALLY changed to your selected absolute path for each file.py using a text editor.

Also, the rest of the path used refers to the folder name generated in PART0.

NOTE: the predicted structure generated must maintain a specific naming convention:
id-name_chain_residue-position_mutated-aminoacid.pdb

so it comes out something like:
1a43_A_218S.pdb

for multiple mutations:
1a43_A_218S_219S_220Y.pdb

If there are any error, let me know.

#############################################################
#############################################################
#############################################################
GUIDE: follow the order

PART0.py = generates all the folders for the following steps. You can put it manually in the main_dir line or through the input line that comes out. Paste the absolute path

PART1.py = it makes a first generic evaluation of all the matrixes of aaindex using the wild-type pdb structure and biopython around_search_neighbors function.

(for dataset S2648)
PART2_multimodel.py = ONLY if you need to use rosetta since it has problem dealing with multi-model pdb files. It saves each model in a new file (1a53_A_22R_model_1, ..._model_2 etc).

PART2-MODELLER.py
PART2-ROSETTA.py = generate the mutated structures

PART2_check.py = OPTIONAL. Checks if the mutations were applied correctly for each file.

PART2_prep.py = prepare files for the next steps (deletes hydrogens atom mainly)

PART2_distance.py = calculate the minimal distance between each residue of the protein. It saves them in a form to be used with numpy.loadtxt() function. It is a time-consuming process.

PART2_ddg.py = calculate the ddg for each variant and save them in a file.

PART2_pearson.py = calculate linear coefficient between experimental and predicted ddgs.

(for dataset Protherm_multiple)
PART3-MODELLER.py = generate mutations.

PART3_prep.py = prepare files.

PART3_distance.py = make arrays.

PART3_ddg.py = calculate ddgs.

PART3_pearson.py = pearson.

PART4-REV-MODELLER.py = regenerate wild-type sequences. Use to check anti-symmetry property. The new files have the same file of the mutated ones even if the residue is different. I know it can be confusing but it was easier to compare each file correctly

PART4_distance.py = make arrays.

PART4_ddg.py = calculate ddgs.

PART4_pearson.py = pearson. This ones use a function to calculate ddg slightly different since the "wild-type" file are not named with only the id_name like 1a43.

(For dataset S669)
PART5_prep.py = ATTENTION,here the script works a bit differently from the precedent ones. It both delets hydrogens and hetatm since the latter gave problems to a few mutations during generation.
  If you want to apply the passage the same as the other ones, comment the sv.del_hydro(filename) line, delete hetatm, generate structure with the next file, then re-activate sv.del_hydro(filename) and run this   again.

PART5-MODELLER.py = same as before

PART5_distance.py

PART5_ddg.py 

PART5_pearson.py

(to check for transitivity property, using some mutation from S669)
PART6_prep = same concept as PART5.

PART6-1-MODELLER.py = generate the first mutation.

PART6-2-MODELLER.py = generate the second mutation.

PART6_distance.py

PART6_ddg.py = concept similar to PART4, Since the file names of the two files are different this time, it is used a different version of the script to compare such files using the data.

PART6_pearson.py = use the TH.0_compare file in this section.



